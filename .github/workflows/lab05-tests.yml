name: Lab 05 Tests

on:
  push: 
    branches: [lab05-*]
  pull_request:
    paths:
      - 'labs/lab05/**'
      - '.github/workflows/lab05-tests.yml'

permissions:
  pull-requests: write
  contents: write

jobs:
  test:
    name: Run Lab 05 Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.1'
          
      - name: Install Go dependencies
        run: |
          cd labs/lab05/backend
          if [ ! -f go.mod ]; then
            go mod init lab05
          fi
          go mod tidy
          
      - name: Install Flutter dependencies
        run: |
          cd labs/lab05/frontend
          flutter pub get
          
      - name: Run Go tests
        id: go-tests
        run: |
          cd labs/lab05/backend
          # Run tests for each package and capture results
          echo "userdomain_passed=false" >> $GITHUB_OUTPUT
          echo "jwtservice_passed=false" >> $GITHUB_OUTPUT
          echo "security_passed=false" >> $GITHUB_OUTPUT
          
          if go test ./userdomain/...; then
            echo "userdomain_passed=true" >> $GITHUB_OUTPUT
          fi
          if go test ./jwtservice/...; then
            echo "jwtservice_passed=true" >> $GITHUB_OUTPUT
          fi
          if go test ./security/...; then
            echo "security_passed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Run Flutter tests
        id: flutter-tests
        run: |
          cd labs/lab05/frontend
          echo "user_entity_passed=false" >> $GITHUB_OUTPUT
          echo "auth_service_passed=false" >> $GITHUB_OUTPUT
          echo "form_validator_passed=false" >> $GITHUB_OUTPUT
          
          if flutter test test/user_entity_test.dart; then
            echo "user_entity_passed=true" >> $GITHUB_OUTPUT
          fi
          if flutter test test/auth_service_test.dart; then
            echo "auth_service_passed=true" >> $GITHUB_OUTPUT
          fi
          if flutter test test/form_validator_test.dart; then
            echo "form_validator_passed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Calculate score
        id: score
        run: |
          TOTAL=0
          if [[ "${{ steps.go-tests.outputs.userdomain_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.go-tests.outputs.jwtservice_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.go-tests.outputs.security_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.flutter-tests.outputs.user_entity_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.flutter-tests.outputs.auth_service_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.flutter-tests.outputs.form_validator_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          
      - name: Comment PR with score
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const score = ${{ steps.score.outputs.total }};
            const maxScore = 6;
            const percentage = (score / maxScore) * 100;
            
            const results = {
              'Go Tasks': {
                'User Domain Service': ${{ steps.go-tests.outputs.userdomain_passed }},
                'JWT Authentication Service': ${{ steps.go-tests.outputs.jwtservice_passed }},
                'Security Service': ${{ steps.go-tests.outputs.security_passed }}
              },
              'Flutter Tasks': {
                'User Entity & Use Case': ${{ steps.flutter-tests.outputs.user_entity_passed }},
                'Authentication Service': ${{ steps.flutter-tests.outputs.auth_service_passed }},
                'Form Validation': ${{ steps.flutter-tests.outputs.form_validator_passed }}
              }
            };
            
            let comment = `## Lab 05 Test Results\n\n`;
            comment += `Score: ${score}/${maxScore} (${percentage}%)\n\n`;
            comment += `### Advanced Patterns Implementation:\n\n`;
            
            for (const [category, tasks] of Object.entries(results)) {
              comment += `#### ${category}\n`;
              for (const [task, passed] of Object.entries(tasks)) {
                const status = passed ? '✅' : '❌';
                comment += `- ${status} ${task}\n`;
              }
              comment += '\n';
            }
            
            comment += `### Topics Covered:\n`;
            comment += `- Clean Architecture principles\n`;
            comment += `- JWT authentication and security\n`;
            comment += `- Password hashing and validation\n`;
            comment += `- Form validation and security\n`;
            comment += `- Comprehensive unit testing\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Create commit comment with score
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const score = ${{ steps.score.outputs.total }};
            const maxScore = 6;
            const percentage = (score / maxScore) * 100;
            
            const results = {
              'Go Tasks': {
                'User Domain Service': ${{ steps.go-tests.outputs.userdomain_passed }},
                'JWT Authentication Service': ${{ steps.go-tests.outputs.jwtservice_passed }},
                'Security Service': ${{ steps.go-tests.outputs.security_passed }}
              },
              'Flutter Tasks': {
                'User Entity & Use Case': ${{ steps.flutter-tests.outputs.user_entity_passed }},
                'Authentication Service': ${{ steps.flutter-tests.outputs.auth_service_passed }},
                'Form Validation': ${{ steps.flutter-tests.outputs.form_validator_passed }}
              }
            };
            
            let comment = `## Lab 05 Test Results\n\n`;
            comment += `Score: ${score}/${maxScore} (${percentage}%)\n\n`;
            comment += `### Advanced Patterns Implementation:\n\n`;
            
            for (const [category, tasks] of Object.entries(results)) {
              comment += `#### ${category}\n`;
              for (const [task, passed] of Object.entries(tasks)) {
                const status = passed ? '✅' : '❌';
                comment += `- ${status} ${task}\n`;
              }
              comment += '\n';
            }
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comment
            }); 