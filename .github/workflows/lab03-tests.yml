name: Lab 03 Tests

on:
  push:
    branches: [lab03-*]
  pull_request:
    paths:
      - 'labs/lab03/**'
      - '.github/workflows/lab03-tests.yml'

permissions:
  pull-requests: write
  contents: write

jobs:
  test:
    name: Run Lab 03 Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.1'

      - name: Install Go dependencies
        run: |
          cd labs/lab03/backend
          if [ ! -f go.mod ]; then
            go mod init lab03-backend
          fi
          go mod tidy

      - name: Install Flutter dependencies
        run: |
          cd labs/lab03/frontend
          flutter pub get

      - name: Run Go tests
        id: go-tests
        run: |
          cd labs/lab03/backend
          echo "models_passed=false" >> $GITHUB_OUTPUT
          echo "storage_passed=false" >> $GITHUB_OUTPUT
          echo "handlers_passed=false" >> $GITHUB_OUTPUT

          if go test ./models/...; then
            echo "models_passed=true" >> $GITHUB_OUTPUT
          fi
          if go test ./storage/...; then
            echo "storage_passed=true" >> $GITHUB_OUTPUT
          fi
          if go test ./api/...; then
            echo "handlers_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Start backend server
        run: |
          cd labs/lab03/backend
          go run main.go &
          echo $! > backend.pid
          sleep 5  # Wait for server to start

      - name: Run Flutter tests
        id: flutter-tests
        run: |
          cd labs/lab03/frontend
          echo "api_service_passed=false" >> $GITHUB_OUTPUT
          echo "chat_screen_passed=false" >> $GITHUB_OUTPUT
          echo "integration_passed=false" >> $GITHUB_OUTPUT

          if flutter test test/api_service_test.dart; then
            echo "api_service_passed=true" >> $GITHUB_OUTPUT
          fi
          if flutter test test/chat_screen_test.dart; then
            echo "chat_screen_passed=true" >> $GITHUB_OUTPUT
          fi
          if flutter test test/integration_test.dart; then
            echo "integration_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Stop backend server
        if: always()
        run: |
          if [ -f labs/lab03/backend/backend.pid ]; then
            kill $(cat labs/lab03/backend/backend.pid) || true
            rm labs/lab03/backend/backend.pid
          fi

      - name: Calculate score
        id: score
        run: |
          TOTAL=0
          if [[ "${{ steps.go-tests.outputs.models_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.go-tests.outputs.storage_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.go-tests.outputs.handlers_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.flutter-tests.outputs.api_service_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.flutter-tests.outputs.chat_screen_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          if [[ "${{ steps.flutter-tests.outputs.integration_passed }}" == "true" ]]; then TOTAL=$((TOTAL + 1)); fi
          echo "total=$TOTAL" >> $GITHUB_OUTPUT

      - name: Comment PR with score
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const score = ${{ steps.score.outputs.total }};
            const maxScore = 6;
            const percentage = (score / maxScore) * 100;

            const results = {
              'Go Backend Tasks': {
                'Message Models & Validation': ${{ steps.go-tests.outputs.models_passed }},
                'Memory Storage CRUD': ${{ steps.go-tests.outputs.storage_passed }},
                'HTTP API Handlers': ${{ steps.go-tests.outputs.handlers_passed }}
              },
              'Flutter Frontend Tasks': {
                'API Service Integration': ${{ steps.flutter-tests.outputs.api_service_passed }},
                'Chat Screen UI': ${{ steps.flutter-tests.outputs.chat_screen_passed }},
                'Integration Test': ${{ steps.flutter-tests.outputs.integration_passed }}
              }
            };

            let comment = `## Lab 03 Test Results - REST API Chat System\n\n`;
            comment += `### 🎯 Score: ${score}/${maxScore} (${percentage}%)\n\n`;
            
            if (percentage >= 100) {
              comment += `🎉 **Excellent work!** All components implemented correctly!\n\n`;
            } else if (percentage >= 80) {
              comment += `🚀 **Great progress!** Almost there!\n\n`;
            } else if (percentage >= 60) {
              comment += `💪 **Good start!** Keep working on the remaining components.\n\n`;
            } else {
              comment += `📚 **Getting started!** Focus on implementing the basic structures first.\n\n`;
            }

            comment += `### 📋 Task Completion:\n\n`;

            for (const [category, tasks] of Object.entries(results)) {
              comment += `#### ${category}\n`;
              for (const [task, passed] of Object.entries(tasks)) {
                const status = passed ? '✅' : '❌';
                comment += `- ${status} ${task}\n`;
              }
              comment += '\n';
            }

            comment += `### 🔧 Component Details:\n\n`;
            comment += `**Backend (Go):**\n`;
            comment += `- **Models**: Message struct, validation, JSON serialization\n`;
            comment += `- **Storage**: In-memory CRUD operations with thread safety\n`;
            comment += `- **Handlers**: REST endpoints (GET, POST, PUT, DELETE) + HTTP Cat API\n\n`;
            
            comment += `**Frontend (Flutter):**\n`;
            comment += `- **API Service**: HTTP client with error handling and timeouts\n`;
            comment += `- **Chat Screen**: Message list, CRUD operations, loading/error states\n`;
            comment += `- **Integration Test**: Integration with HTTP Cat API for status visualization\n\n`;

            if (score < maxScore) {
              comment += `### 💡 Next Steps:\n`;
              if (!${{ steps.go-tests.outputs.models_passed }}) {
                comment += `- Complete Message struct fields and validation methods\n`;
              }
              if (!${{ steps.go-tests.outputs.storage_passed }}) {
                comment += `- Implement thread-safe CRUD operations in MemoryStorage\n`;
              }
              if (!${{ steps.go-tests.outputs.handlers_passed }}) {
                comment += `- Complete REST API handlers and HTTP status endpoint\n`;
              }
              if (!${{ steps.flutter-tests.outputs.api_service_passed }}) {
                comment += `- Implement HTTP client methods and error handling\n`;
              }
              if (!${{ steps.flutter-tests.outputs.chat_screen_passed }}) {
                comment += `- Build chat UI with message operations and state management\n`;
              }
              if (!${{ steps.flutter-tests.outputs.integration_passed }}) {
                comment += `- Integrate HTTP Cat API for status code visualization\n`;
              }
            }

            comment += `\n### 🐱 HTTP Cat Integration\n`;
            comment += `Make sure to test different status codes: 200 (OK), 404 (Not Found), 418 (I'm a teapot), 500 (Server Error)\n`;
            comment += `Visit [http.cat](https://http.cat/) to see all available status cats! 🐱\n`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Create commit comment with score
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const score = ${{ steps.score.outputs.total }};
            const maxScore = 6;
            const percentage = (score / maxScore) * 100;

            const results = {
              'Go Backend Tasks': {
                'Message Models & Validation': ${{ steps.go-tests.outputs.models_passed }},
                'Memory Storage CRUD': ${{ steps.go-tests.outputs.storage_passed }},
                'HTTP API Handlers': ${{ steps.go-tests.outputs.handlers_passed }}
              },
              'Flutter Frontend Tasks': {
                'API Service Integration': ${{ steps.flutter-tests.outputs.api_service_passed }},
                'Chat Screen UI': ${{ steps.flutter-tests.outputs.chat_screen_passed }},
                'Integration Test': ${{ steps.flutter-tests.outputs.integration_passed }}
              }
            };

            let comment = `## Lab 03 Test Results - REST API Chat System\n\n`;
            comment += `### 🎯 Score: ${score}/${maxScore} (${percentage}%)\n\n`;

            comment += `### 📋 Task Completion:\n\n`;

            for (const [category, tasks] of Object.entries(results)) {
              comment += `#### ${category}\n`;
              for (const [task, passed] of Object.entries(tasks)) {
                const status = passed ? '✅' : '❌';
                comment += `- ${status} ${task}\n`;
              }
              comment += '\n';
            }

            comment += `\n🐱 **HTTP Cat Status Codes**: Don't forget to test your status endpoint with various codes!\n`;

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comment
            }); 